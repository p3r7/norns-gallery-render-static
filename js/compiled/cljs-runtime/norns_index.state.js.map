{"version":3,"sources":["norns_index/state.cljs"],"mappings":";AAWA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAehB,AAAA,AAAMC,AAAwBC,AAAWC;AAAzC,AACE,AAEMC,AAAkB,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQP,AAAmBI;AAC9CI,AAAuB,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQP,AAAmBI;AAGnDK,AAAY,AAACC,AAAIC,AAAiBP;AAClCQ,AAAiB,AAAA,AAASH;AAC1BI,AAAsB,AAAA,AAAkBJ;AACxCK,AAAyB,AAAID,AACF,AAACE,AAAKH,AAAiBC,AACvBD;AAG3BI,AAAgB,AAAA,AAAWb;AAC3Bc,AAAiC,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACE,AAAUJ;AAAiBF;AACpEO,AAAkC,AAAA,AAAAC,AAACH;AAAD,AAAO,AAAAG,AAACF,AAAUJ;AAAiBR;AACrEe,AAAgB,AAAI,AAAA,AAAG,AAACC,AAAMV,AACZO,AACAJ;AAClBQ,AAAgB,AAAA,AAAA,AAAM,AAAA,AAAoBtB,AACxB,AAACiB,AAAQhB,AAAQ,AAAA,AAAoBD;AArB7D,AAuBE,AACE,AAACuB,AAAOH;AACR,AAAI,AAAA,AAAA,AAAA,AAACH,AAAQf;AAAb;;AAAA;;;AAFF,AAME,AAAA,AAACsB,AAAEtB;AANL;;AAAA,AASE,AAAA,AAACsB,AAAEtB;AACH,AAAIoB;AAAJ;;AAAA;;;AAVF,AAAA;;;;;;AAmBJ,AAAA,AAAMG,AAAcC;AAApB,AACE,AAAM1B,AAAW,AAACO,AAAIoB,AAAiBD;AACjCb,AAAgB,AAAA,AAAWb;AAC3B4B,AAAW,AAAA,AAAAzB,AAAA,AAAA,AAAA,AAACC,AAAQP;AAF1B,AAGE,AACC,AAACgC,AAAyBH,AAAYE,AACtC,AAAA,AAAAE,AAACC;AAAD,AAAS,AAAAD,AAAC/B,AAAuBC;AAAjC,AAAA,AAAA,AAAA,AAAA","names":["js/norns-index","js/norns-index.state","js/norns-index.state.state","norns-index.state/state","reagent.core.atom","norns-index.state/show-script-w-feature?","script-def","feature","feature-display-f","cljs.core/deref","cljs.core.get_in","feature-display-vals-f","feature-def","cljs.core.get","norns-index.conf/io-features","feature-std-vals","feature-catch-all-val","feature-all-default-vals","cljs.core.conj","script-features","script-matching-features-default","p1__57437#","cljs.core.keep","norns-index.utils.core/member?","script-matching-features-filtered","p1__57438#","script-matching","cljs.core/count","script-requires","cljs.core/empty?","cljs.core._EQ_","norns-index.state/show-script?","script-name","norns-index.conf/script-list","filter-txt","clojure.string/includes?","p1__57439#","cljs.core/every?"],"sourcesContent":["(ns norns-index.state\n  (:require\n   [norns-index.utils.core :refer [member?]]\n   [reagent.core :as r]\n\n   [norns-index.conf :as conf]))\n\n\n\f\n;; STATE\n\n(defonce state (r/atom {:filter\n                        {:txt \"\"\n                         :io\n                         {:grid {:display :optional\n                                 :values #{:grid_128 :grid_64 :grid_any}}\n                          :arc {:display :optional}\n                          :crow {:display :optional}\n                          :midi {:display :optional\n                                 :values #{:midi_in :midi_out}}}\n                         }}))\n\n\n\f\n;; FILTER\n\n(defn show-script-w-feature? [script-def feature]\n  (let [\n        ;; filters\n        feature-display-f (get-in @state [:filter :io feature :display])\n        feature-display-vals-f (get-in @state [:filter :io feature :values])\n\n        ;; feature familly values\n        feature-def (get conf/io-features feature)\n        feature-std-vals (:values feature-def)\n        feature-catch-all-val (:catch-all-value feature-def)\n        feature-all-default-vals (if feature-catch-all-val\n                                   (conj feature-std-vals feature-catch-all-val)\n                                   feature-std-vals)\n\n        ;; tested script\n        script-features (:features script-def)\n        script-matching-features-default (keep #(member? % script-features) feature-all-default-vals)\n        script-matching-features-filtered (keep #(member? % script-features) feature-display-vals-f)\n        script-matching (if (> (count feature-all-default-vals) 1)\n                          script-matching-features-filtered\n                          script-matching-features-default)\n        script-requires (when (:required-features script-def)\n                          (member? feature (:required-features script-def)))]\n\n    (cond\n      (empty? script-matching)\n      (if (member? feature-display-f [:only :required])\n        false\n        true)\n\n      (= feature-display-f :no)\n      false\n\n      (= feature-display-f :required)\n      (if script-requires\n        true\n        false)\n\n      :default                          ; feature-display-f = :only\n      true\n      )))\n\n\n(defn show-script? [script-name]\n  (let [script-def (get conf/script-list script-name)\n        script-features (:features script-def)\n        filter-txt (get-in @state [:filter :txt])]\n    (and\n     (clojure.string/includes? script-name filter-txt)\n     (every? #(show-script-w-feature? script-def %) [:grid :arc :crow :midi])))\n  )\n"]}