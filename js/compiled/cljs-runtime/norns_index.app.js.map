{"version":3,"sources":["norns_index/app.cljs"],"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","names":["norns-index.app/script-list","norns-index.app/script-categories","norns-index.app/script-categories-order","norns-index.app/state","reagent.core.atom","norns-index.app/init","norns-index.app/mount-root","norns-index.app/on-reload","js/console.debug","G__52623","norns-index.app/mount-app-element","norns-index.app/main-view","norns-index.app/mount","component","el","reagent.dom.render","temp__5735__auto__","norns-index.app/app-element","goog.dom/getElement","norns-index.app/simple-feature->icon","feature","cljs.core.get","norns-index.app/simple-feature->icon-maybe","search","features","norns-index.utils.core/member?","norns-index.app/midi-feature->icon-maybe","p1__52624#","cljs.core/every?","norns-index.app/audio-feature->icon-maybe","p1__52625#","norns-index.app/grid-feature->icon-maybe","p1__52626#","norns-index.app/norns-script-features->icons","p1__52627#","p1__52628#","p1__52629#","cljs.core.map","norns-index.utils.core/remove-nils","e","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.doall","norns-index.app/script-category-section","script-category","matched-scripts","cljs.core.filter","p__52631","vec__52632","cljs.core.nth","script-name","script-props","and__4115__auto__","clojure.string/includes?","cljs.core/deref","cljs.core.get_in","cljs.core/keys","cljs.core.sort","cljs.core/seq","p1__52630#","norns-index.app/script-panel","feature-icons","norns-index.app/screenshot","clojure.string/upper-case","p1__52635#","norns-index.app/feature","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","p__52638","vec__52639","seq52636","G__52637","cljs.core/first","cljs.core/next","self__4723__auto__","feature-name"],"sourcesContent":["(ns norns-index.app\n  (:require\n   ;; core\n   [clojure.edn :as edn]\n   [goog.dom :as gdom]\n   [norns-index.utils.core :refer [member? remove-nils]]\n\n   ;; react\n   [reagent.core :as r]\n   [reagent.dom :as rdom]))\n\n\n(declare mount-root mount-app-element app-element\n         ;; views\n         main-view script-panel screenshot feature\n         script-category-section)\n\n\n\f\n;; CONF\n\n(def script-list\n  {\"awake\" {:types [:sequencer]\n            :features #{:audio_out :midi_out :grid_128}}\n   \"barcode\" {:types [:looper]\n              :features #{:audio_in :audio_out}}\n   \"changes\" {:types [:cc]\n              :features #{:midi_out}}\n   \"cranes\" {:types [:looper]\n             :features #{:audio_in :audio_out :grid_128}}\n   ;; \"downtown\" {:types [:looper]}\n   \"drift\" {:types [:sequencer]\n            :features #{:audio_out :midi_out}}\n   \"drum_room\" {:types [:sample-player]\n                :features #{:audio_out :midi_in}}\n   \"euclydigons\" {:types [:sequencer]\n                  :features #{:audio_out :midi_out}}\n   \"flora\" {:types [:sequencer]\n            :features #{:audio_out :midi_out}}\n   \"fretwork\" {:types [:sequencer]\n               :features #{:audio_out :midi_out :grid_128}}\n   \"greyhole\" {:types [:audio-effect]\n               :features #{:audio_in :audio_out}}\n   \"gridstep\" {:types [:sequencer]\n               :features #{:audio_out :midi_out :grid_64 :grid_128}}\n   \"hachi\" {:types [:synth]\n            :features #{:audio_out}}\n   \"lissadron\" {:types [:synth]\n                :features #{:audio_out :midi_in}}\n   \"loom\" {:types [:sequencer]\n           :features #{:grid_any :audio_out :midi_out}}\n   \"lost_futures\" {:types [:synth]\n                   :features #{:midi_in :audio_out}}\n   \"mlr\" {:types [:looper]\n          :features #{:audio_in :audio_out :grid_128}}\n   \"molly_the_polly\" {:types [:synth]\n                      :features #{:midi_in :audio_out :grid_128}}\n   \"mouse\" {:types [:sequencer]\n            :features #{:kbd :audio_out :midi_out}}\n   \"ooooooo\" {:types [:looper]\n              :features #{:audio_in :audio_out}}\n   \"orca\" {:types [:tracker]\n           :features #{:audio_in :audio_out :kbd :arc :midi_out :grid_any}}\n   \"ortf\" {:types [:sample-player]\n           :features #{:audio_out}}\n   \"passerby\" {:types [:synth]\n               :features #{:audio_out :midi_in :grid_128}}\n   \"pedalboard\" {:types [:audio-effect]\n                 :features #{:audio_in :audio_out}}\n   \"reels\" {:types [:looper]\n            :features #{:audio_in :audio_out}}\n   \"rpmate\" {:types [:util]\n             :features #{:audio_in :audio_out}}\n   \"rudiments\" {:types [:synth]\n                :features #{:grid_128 :audio_out}}\n   \"sam\" {:types [:sampler]\n          :features #{:audio_in :audio_out}}\n   \"sines\" {:types [:synth]\n            :features #{:midi_in :audio_out}}\n   \"step\" {:types [:sequencer]\n           :features #{:grid_128 :audio_out}}\n   \"takt\" {:types [:sequencer]\n           :features #{:grid_128 :audio_out}}\n   \"timber_player\" {:types [:sample-player]\n                    :features #{:grid_128 :midi_in :audio_out}}\n   \"timeparty\" {:types [:audio-effect]\n                :features #{:audio_in :audio_out}}\n   \"uvf\" {:types [:sample-player]\n          :features #{:audio_out}}\n   \"wrms\" {:types [:looper]\n           :features #{:audio_in :audio_out}}\n   \"yggrasil\" {:types [:tracker]\n               :features #{:kbd :midi_out :audio_out}}\n   }\n  )\n\n(def script-categories\n  {:synth \"Synths & Drones\"\n   :granular \"Granular Processing\"\n   :sample-player \"Sample Players\"\n   :sampler \"Basic Samplers\"\n   :sequencer \"Sequencers\"\n   :tracker \"Trackers\"\n   :cc \"Control Modulation Sources\"\n   :audio-effect \"Audio Effets\"\n   :looper \"Loopers, Live Samplers & Crazy Delays\"\n   :midi-effect \"Midi Effets\"\n   :util \"Utilities\"\n   })\n\n(def script-categories-order\n  [:synth\n   :granular\n   :sample-player\n   :sampler\n   :sequencer\n   :tracker\n   :cc\n   :audio-effect\n   :looper\n   :midi-effect\n   :util])\n\n\n\f\n;; STATE\n\n(def state (r/atom {:filter\n                    {:txt \"\"\n                     }}))\n\n\f\n;;  ENTRY POINT\n\n(defn init\n  \"Main entry point.\n  Called (only) on first page load.\"\n  []\n  (mount-root))\n\n(defn ^:dev/after-load on-reload\n  \"Called (only) when code gets reloaded by shadow-cljs.\"\n  []\n  (mount-root)\n  (js/console.debug \"code reloaded by shadow-cljs\"))\n\n(defn mount-root\n  \"Mount transpilled js code into #app dome element.\n  Gets called both at page load (`init`) and on automatic code reload by shadow-cljs (`on-reload`).\"\n  []\n  (mount-app-element [main-view]))\n\n\n\f\n;; HELPERS - DOM\n\n(defn mount\n  \"Mount and render hiccup COMPONENT on dom element EL.\"\n  [component el]\n  (rdom/render component el))\n\n(defn mount-app-element\n  \"Mount hiccup COMPONENT on dom element #app.\"\n  [component]\n  (when-let [el (app-element)]\n    (mount component el)))\n\n(defn app-element []\n  ;; NB: we often also see:\n  ;; (.getElementById js/document \"app\")\n  (gdom/getElement \"app\"))\n\n\n\f\n;; HELPERS - NORNS SCRIPT FEATURES\n\n(defn simple-feature->icon [feature]\n  (get\n   {:midi_in \"midi_i\"\n    :midi_out \"midi_o\"\n    :audio_in \"audio_i\"\n    :audio_out \"audio_o\"\n    :grid_128 \"grid_128\"\n    :grid_any \"grid_any\"\n    :kbd \"kbd\"\n    :arc \"arc\"}\n   feature))\n\n(defn simple-feature->icon-maybe [search features]\n  (when (member? search features)\n    (simple-feature->icon search)))\n\n(defn midi-feature->icon-maybe [features]\n  (cond\n    (every? #(member? % features) #{:midi_in :midi_out})\n    \"midi_io\"\n\n    (member? :midi_in features)\n    (simple-feature->icon :midi_in)\n\n    (member? :midi_out features)\n    (simple-feature->icon :midi_out)))\n\n(defn audio-feature->icon-maybe [features]\n  (cond\n    (every? #(member? % features) #{:audio_in :audio_out})\n    \"audio_io\"\n\n    (member? :audio_in features)\n    (simple-feature->icon :audio_in)\n\n    (member? :audio_out features)\n    (simple-feature->icon :audio_out)))\n\n(defn grid-feature->icon-maybe [features]\n  (cond\n    (member? :grid_any features)\n    (simple-feature->icon :grid_any)\n\n    (every? #(member? % features) #{:grid_64 :grid_128})\n    \"grid_64-128\"\n\n    (member? :grid_128 features)\n    (simple-feature->icon :grid_128)))\n\n\n(defn norns-script-features->icons [features]\n  (->\n   (map #(% features) [audio-feature->icon-maybe\n                       midi-feature->icon-maybe\n                       grid-feature->icon-maybe\n                       #(simple-feature->icon-maybe :kbd %)\n                       #(simple-feature->icon-maybe :arc %)])\n   remove-nils))\n\n\n\f\n;; VIEWS\n\n(defn main-view []\n  [:div.main-view\n   [:div.script-category-section\n    [:h2 \"Filter\"]\n    [:label.block\n     [:span \"Name\"]\n     [:input\n      {:type \"text\"\n       :style {:margin-left \"0.5em\"}\n       :on-change (fn [e]\n                    (swap! state assoc-in [:filter :txt] e.target.value))}]]]\n   (doall\n    (map script-category-section script-categories-order))])\n\n\n(defn script-category-section [script-category]\n  (when-let [matched-scripts (-> (filter (fn [[script-name script-props]]\n                                           (and\n                                            (member? script-category (:types script-props))\n                                            (clojure.string/includes? script-name (get-in @state [:filter :txt])))) script-list)\n                                 keys\n                                 sort\n                                 seq)]\n    ^{:key (str script-category)}\n    [:div.script-category-section\n     [:h2 (get script-categories script-category)]\n     [:div.flex.flex-wrap.script-panels-container\n      (doall\n       (map #(script-panel script-category %) matched-scripts))]]))\n\n(defn script-panel [script-category script-name]\n  (let [features (get-in script-list [script-name :features])\n        feature-icons (norns-script-features->icons features)]\n    ^{:key (str script-category \".\" script-name)}\n    [:div.script-panel-container\n     [:div.script-panel\n      [screenshot script-name]\n      [:div\n       [:p.script-title (clojure.string/upper-case script-name)]\n       [:div.flex.flex-wrap\n        (doall\n         (map #(feature % script-category script-name) feature-icons))]\n       ]]]))\n\n(defn screenshot [script-name]\n  [:div.norns-screenshot-container\n   [:img.img-norns-screenshot {:src (str \"img/screenshot/\" script-name \".png\")}]])\n\n(defn feature [feature-name & [script-category script-name]]\n  ^{:key (str script-category \".\" script-name \".\" feature-name)}\n  [:div.norns-feature-container\n   [:img.img-norns-feature {:src (str \"img/feature/\" feature-name \".svg\")}]])\n"]}